package com.wsloops.petroladmin;import java.io.IOException;import java.util.concurrent.TimeUnit;import okhttp3.Interceptor;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.Response;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;public class ApiServiceProvider {/*    private static ApiService apiService;    private ApiServiceProvider() {}    public static ApiService getApiService() {        if(apiService == null){            HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();            interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);            OkHttpClient.Builder httpClient = new OkHttpClient.Builder();            httpClient.connectTimeout(30, TimeUnit.SECONDS); // connect timeout            httpClient.readTimeout(30, TimeUnit.SECONDS);            httpClient.addInterceptor(new Interceptor() {                @Override                public Response intercept(Chain chain) throws IOException {                    Request original = chain.request();                    // Request customization: add request headers                    Request.Builder requestBuilder = original.newBuilder()                            .header("Authorization", "Bearer " + PrefManager.getInstance(App.getContext()).getAccessToken()); // <-- this is the important line                    Request request = requestBuilder.build();                    return chain.proceed(request);                }            });          httpClient.addInterceptor(interceptor);            Retrofit retrofit = new Retrofit.Builder()                    .client(httpClient.build())                    .baseUrl(Constants.BASE_URL)                    .addConverterFactory(GsonConverterFactory.create())                    .build();            apiService = retrofit.create(ApiService.class);        }        return apiService;    }*/}